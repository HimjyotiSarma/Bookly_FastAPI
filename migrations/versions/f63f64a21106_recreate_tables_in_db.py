"""Recreate Tables in DB

Revision ID: f63f64a21106
Revises: 
Create Date: 2024-12-03 22:48:49.936386

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f63f64a21106'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=240), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_table('users',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), nullable=False),
    sa.Column('firstname', sa.VARCHAR(length=50), nullable=False),
    sa.Column('lastname', sa.VARCHAR(length=50), nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), server_default=sa.text("'user'"), nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('password_hash'),
    sa.UniqueConstraint('username')
    )
    op.create_table('books',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('Title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('Author', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('Publication_Year', sa.Date(), nullable=False),
    sa.Column('user_uid', sa.UUID(), nullable=False),
    sa.Column('Genre', postgresql.ARRAY(sa.VARCHAR()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('Title', 'Author', 'user_uid', name='unique_title_author')
    )
    op.create_table('booktag',
    sa.Column('book_uid', sa.Uuid(), nullable=False),
    sa.Column('tag_uid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['book_uid'], ['books.uid'], ),
    sa.ForeignKeyConstraint(['tag_uid'], ['tag.uid'], ),
    sa.PrimaryKeyConstraint('book_uid', 'tag_uid'),
    sa.UniqueConstraint('book_uid', 'tag_uid', name='unique_book_tag')
    )
    op.create_table('reviews',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('rating', sa.INTEGER(), nullable=False),
    sa.Column('review_text', sa.VARCHAR(length=250), nullable=False),
    sa.Column('user_uid', sa.UUID(), nullable=False),
    sa.Column('book_uid', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['book_uid'], ['books.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews')
    op.drop_table('booktag')
    op.drop_table('books')
    op.drop_table('users')
    op.drop_table('tag')
    # ### end Alembic commands ###
